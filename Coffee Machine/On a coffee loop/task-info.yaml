type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |-
    package machine;
    import java.util.Scanner;
    public class CoffeeMachine {
        public static void main(String[] args) {
            // put your code here
            //Cases
            Scanner scanner = new Scanner(System.in);

            int waterI = 400;
            int milkI = 540;
            int coffeeI = 120;
            int cupsI = 9;
            int moneyI = 550;

            System.out.println("The coffee machine has:\n" +
                    waterI+" of water\n" +
                    milkI+" of milk\n" +
                    coffeeI+" of coffee beans\n" +
                    cupsI+" of disposable cups\n" +
                    moneyI+" of money");

            System.out.println("Write action (buy, fill, take): ");
            System.out.print(">");
            String option = scanner.next();

            switch (option){
                case "buy":
                    /*
                    * Three types of coffee:
                    * -Espresso (250ML Water, 16G Coffee Beans, 4$)
                    * -Late (350ML Water, 75ML Milk, 20G Coffee Beans, 7$)
                    * -Cappuccino (200ML Water, 100ML Milk, 12G Coffee Beans, 6$)
                    * */

                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
                    System.out.print(">");
                    String coffeeOption = scanner.next();

                    switch (coffeeOption){
                        /*
                        -Buying - Substitute from the values the machine has stored
                        NOTE: There is no mention of an exit statement if we don't hold the ingridients for a coffee...
                        So we will continue on! (and make half a coffee? Maybe?)
                        */

                        case "1":
                            /*Espresso
                            * -250ML Water
                            * -16G Coffee Beans
                            * -1 Cup
                            * -4$*/
                            waterI = waterI - 250;
                            coffeeI = coffeeI - 16;
                            --cupsI;
                            moneyI = moneyI + 4;
                            break;
                        case "2":
                            /*Latte
                            * 350ML Water
                            * -75ML Milk
                            * -20G Coffee Beans
                            * -1 Cup
                            * -7$
                            * */
                            waterI = waterI - 350;
                            milkI = milkI - 75;
                            coffeeI = coffeeI - 20;
                            --cupsI;
                            moneyI = moneyI + 7;
                            break;
                        case "3":
                            /*Cappuccino
                            * -200ML Water
                            * -100ML Milk
                            * -12G Coffee Beans
                            * -1 Cup
                            * -6$
                            * */
                            waterI = waterI - 200;
                            milkI = milkI - 100;
                            coffeeI = coffeeI - 12;
                            --cupsI;
                            moneyI = moneyI + 6;
                            break;



                    }
                    break;

                case "fill":
                    /*
                    * Four ingridients to fill:
                    * -Water (Default: 400ML)
                    * -Milk (Default: 540ML)
                    * -Coffee (Default: 120G)
                    * -Cups (Default: 9 Cups)
                    * */
                    System.out.println("Write how many ml of water do you want to add: ");
                    System.out.print(">");
                    int addedWater = scanner.nextInt();
                    waterI = waterI+addedWater;
                    System.out.println("Write how many ml of milk do you want to add: ");
                    System.out.print(">");
                    int addedMilk = scanner.nextInt();
                    milkI = milkI+addedMilk;
                    System.out.println("Write how many grams of coffee beans do you want to add: ");
                    System.out.print(">");
                    int addedCoffee = scanner.nextInt();
                    coffeeI = coffeeI + addedCoffee;
                    System.out.println("Write how many disposable cups of coffee do you want to add: ");
                    System.out.print(">");
                    int addedCups = scanner.nextInt();
                    cupsI = cupsI + addedCups;

                    break;

                case "take":
                    /*
                    * Default: 550$
                    * Extract all the money
                    * */

                    System.out.println("I gave you $"+moneyI);
                    moneyI = 0;

                    break;
            }

            System.out.println("The coffee machine has:\n" +
                    waterI+" of water\n" +
                    milkI+" of milk\n" +
                    coffeeI+" of coffee beans\n" +
                    cupsI+" of disposable cups\n" +
                    moneyI+" of money");

    //
    //        System.out.println("Write how many ml of water the coffee machine has: ");
    //        int waterInt = scanner.nextInt();
    //        System.out.print(">");
    //        System.out.println("Write how many ml of milk the coffee machine has: ");
    //        int milkInt = scanner.nextInt();
    //        System.out.print(">");
    //        System.out.println("Write how many grams of coffee beans the coffee machine has:");
    //        int coffeeInt = scanner.nextInt();
    //        System.out.print(">");
    //        System.out.println("Write how many cups of coffee you will need:");
    //        //System.out.print(">");
    //        int coffeeCupsReq = scanner.nextInt();
    //
    //        /*One cup:
    //         * 50ml milk
    //         * 15g coffee
    //         * 200ml water
    //         */
    //
    //
    //        //how many can you make?
    //
    //        int cupsCanBeMade = Math.min(waterInt/200, Math.min(milkInt/50, coffeeInt/15));
    //
    //        if(cupsCanBeMade > coffeeCupsReq){
    //            int more = cupsCanBeMade - coffeeCupsReq;
    //            System.out.println("Yes, I can make that amount of coffee (and even "+more+" more than that)");
    //        }
    //        else if(coffeeCupsReq > cupsCanBeMade){
    //            System.out.println("No, I can make only "+cupsCanBeMade+" cup(s) of coffee");
    //        }
    //        else if(coffeeCupsReq == cupsCanBeMade){
    //            System.out.println("Yes, I can make that amount of coffee");
    //        }
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 5
